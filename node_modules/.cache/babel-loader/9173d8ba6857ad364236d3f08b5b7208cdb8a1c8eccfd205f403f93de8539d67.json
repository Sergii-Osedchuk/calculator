{"ast":null,"code":"var _jsxFileName = \"F:\\\\udemy\\\\calculator\\\\src\\\\App.js\";\nimport Header from './components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // const yearlyData = []; \n\n  const calculateHandler = e => {\n    e.preventDefault();\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n    let totalCapital = 0;\n\n    // let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    // const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    // const expectedReturn = +userInput['expected-return'] / 100;\n    // const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = Math.round(currentSavings * expectedReturn);\n      currentSavings += yearlyInterest + yearlyContribution;\n      totalCapital += currentSavings;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n        totalCapital: totalCapital\n      });\n    }\n    // do something with yearlyData ...\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","jsxDEV","_jsxDEV","App","calculateHandler","e","preventDefault","yearlyData","totalCapital","i","duration","yearlyInterest","Math","round","currentSavings","expectedReturn","yearlyContribution","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/udemy/calculator/src/App.js"],"sourcesContent":["import Header from './components/Header';\n\nfunction App() {\n \n  // const yearlyData = []; \n\n  const calculateHandler = (e) => {\n    e.preventDefault();\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n    let totalCapital = 0;\n\n    // let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    // const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    // const expectedReturn = +userInput['expected-return'] / 100;\n    // const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = Math.round(currentSavings * expectedReturn);\n      currentSavings += yearlyInterest + yearlyContribution;\n      totalCapital += currentSavings;\n\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n        totalCapital: totalCapital\n      });\n    }\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header />\n\n      \n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,GAAGA,CAAA,EAAG;EAEb;;EAEA,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;IACvB,IAAIC,YAAY,GAAG,CAAC;;IAEpB;IACA;IACA;IACA;;IAEA;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,QAAQ,EAAED,CAAC,EAAE,EAAE;MACjC,MAAME,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,GAAGC,cAAc,CAAC;MAClED,cAAc,IAAIH,cAAc,GAAGK,kBAAkB;MACrDR,YAAY,IAAIM,cAAc;MAE9BP,UAAU,CAACU,IAAI,CAAC;QACd;QACAC,IAAI,EAAET,CAAC,GAAG,CAAC;QACXE,cAAc,EAAEA,cAAc;QAC9BQ,gBAAgB,EAAEL,cAAc;QAChCE,kBAAkB,EAAEA,kBAAkB;QACtCR,YAAY,EAAEA;MAChB,CAAC,CAAC;IACJ;IACA;EACF,CAAC;EAED,oBACEN,OAAA;IAAAkB,QAAA,eACElB,OAAA,CAACF,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAOP,CAAC;AAEV;AAACC,EAAA,GA9CQtB,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}